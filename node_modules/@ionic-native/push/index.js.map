{"version":3,"sources":["../../../src/@ionic-native/plugins/push/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,eAAA,EAAiB,iBAAA,EAAmB,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAC5G,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAkN7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgEG;AAUH;IAA0B,wBAAiB;IAA3C;;IAwBA,CAAC;IAtBC;;;;OAIG;IACH,mBAAI,GAAJ,UAAK,OAAoB;QACvB,MAAM,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED;;;OAGG;IAEH,4BAAa,GAAb,cAAmD,MAAM,CAAC,CAAC,CAAC;IAEvD,eAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,mBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAPA;QADC,OAAO,EAAE;;;;6CACkD;IAhBjD,IAAI;QAThB,MAAM,CAAC;YACN,UAAU,EAAE,MAAM;YAClB,MAAM,EAAE,sBAAsB;YAC9B,SAAS,EAAE,kBAAkB;YAC7B,IAAI,EAAE,kDAAkD;YACxD,OAAO,EAAE,+CAA+C;YACxD,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACpD,CAAC;OAEW,IAAI,CAwBhB;IAAD,WAAC;CAxBD,AAwBC,CAxByB,iBAAiB,GAwB1C;SAxBY,IAAI;AA0BjB;;GAEG;AAMH;IAIE,oBAAY,OAAoB;QAC9B,EAAE,CAAC,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,MAAM,EAAE,kBAAkB,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YAC/E,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAED;;;;OAIG;IAMH,uBAAE,GAAF,UAAG,KAAgB,IAA+B,MAAM,CAAC,CAAC,CAAC;IAE3D;;;;OAIG;IAEH,+BAAU,GAAV,cAA6B,MAAM,CAAC,CAAC,CAAC;IAEtC;;;;;;;OAOG;IAIH,kDAA6B,GAA7B,UAA8B,KAAc,IAAkB,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IACxE;;;OAGG;IAEH,kDAA6B,GAA7B,cAAmD,MAAM,CAAC,CAAC,CAAC;IAE5D;;;;OAIG;IAEH,2BAAM,GAAN,cAAyB,MAAM,CAAC,CAAC,CAAC;IAElC;;OAEG;IAEH,0CAAqB,GAArB,cAAwC,MAAM,CAAC,CAAC,CAAC;IAEjD;;;;OAIG;IAEH,8BAAS,GAAT,UAAU,KAAa,IAAkB,MAAM,CAAC,CAAC,CAAC;IAElD;;;;OAIG;IAEH,gCAAW,GAAX,UAAY,KAAa,IAAkB,MAAM,CAAC,CAAC,CAAC;IAzDpD;QALC,eAAe,CAAC;YACf,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,KAAK;YACpB,aAAa,EAAE,IAAI;SACpB,CAAC;;;wCACoB,UAAU;wCAA2B;IAQ3D;QADC,eAAe,EAAE;;;;gDACoB;IAatC;QAHC,eAAe,CAAC;YACf,aAAa,EAAE,SAAS;SACzB,CAAC;;;;mEACqE;IAMvE;QADC,eAAe,EAAE;;;;mEAC0C;IAQ5D;QADC,eAAe,EAAE;;;;4CACgB;IAMlC;QADC,eAAe,EAAE;;;;2DAC+B;IAQjD;QADC,eAAe,EAAE;;;;+CACgC;IAQlD;QADC,eAAe,EAAE;;;;iDACkC;IA7EzC,UAAU;QALtB,MAAM,CAAC;YACN,UAAU,EAAE,MAAM;YAClB,MAAM,EAAE,sBAAsB;YAC9B,SAAS,EAAE,kBAAkB;SAC9B,CAAC;;OACW,UAAU,CA+EtB;IAAD,iBAAC;CA/ED,AA+EC,IAAA;SA/EY,UAAU","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, CordovaInstance, checkAvailability, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\ndeclare const window: any;\r\n\r\nexport type EventResponse = RegistrationEventResponse & NotificationEventResponse & Error;\r\n\r\nexport interface RegistrationEventResponse {\r\n  /**\r\n   * The registration ID provided by the 3rd party remote push service.\r\n   */\r\n  registrationId: string;\r\n}\r\n\r\n\r\nexport interface NotificationEventResponse {\r\n  /**\r\n   * The text of the push message sent from the 3rd party service.\r\n   */\r\n  message: string;\r\n  /**\r\n   * The optional title of the push message sent from the 3rd party service.\r\n   */\r\n  title?: string;\r\n  /**\r\n   * The number of messages to be displayed in the badge iOS or message count in the notification shade in Android.\r\n   * For windows, it represents the value in the badge notification which could be a number or a status glyph.\r\n   */\r\n  count: string;\r\n  /**\r\n   * The name of the sound file to be played upon receipt of the notification.\r\n   */\r\n  sound: string;\r\n  /**\r\n   * The path of the image file to be displayed in the notification.\r\n   */\r\n  image: string;\r\n  /**\r\n   * An optional collection of data sent by the 3rd party push service that does not fit in the above properties.\r\n   */\r\n  additionalData: NotificationEventAdditionalData & any;\r\n}\r\n\r\n/**\r\n * Loosened up with a dictionary notation, but all non-defined properties need to use (map['prop']) notation\r\n *\r\n * Ideally the developer would overload (merged declaration) this or create a new interface that would extend this one\r\n * so that he could specify any custom code without having to use array notation (map['prop']) for all of them.\r\n */\r\nexport interface NotificationEventAdditionalData {\r\n  [name: string]: any;\r\n\r\n  /**\r\n   * Whether the notification was received while the app was in the foreground\r\n   */\r\n  foreground?: boolean;\r\n  collapse_key?: string;\r\n  coldstart?: boolean;\r\n  from?: string;\r\n  notId?: string;\r\n}\r\n\r\nexport interface IOSPushOptions {\r\n  /**\r\n   * Whether to use prod or sandbox GCM setting.\r\n   */\r\n  fcmSandbox?: boolean | string;\r\n\r\n  /**\r\n   * If true the device shows an alert on receipt of notification.\r\n   * **Note**: the value you set this option to the first time you call the init\r\n   * method will be how the application always acts. Once this is set\r\n   * programmatically in the init method it can only be changed manually by the\r\n   * user in Settings>Notifications>App Name. This is normal iOS behaviour.\r\n   */\r\n  alert?: boolean | string;\r\n\r\n  /**\r\n   * If true the device sets the badge number on receipt of notification.\r\n   * **Note**: the value you set this option to the first time you call the init\r\n   * method will be how the application always acts. Once this is set\r\n   * programmatically in the init method it can only be changed manually by the\r\n   * user in Settings>Notifications>App Name. This is normal iOS behaviour.\r\n   */\r\n  badge?: boolean | string;\r\n\r\n  /**\r\n   * If true the device plays a sound on receipt of notification.\r\n   * **Note**: the value you set this option to the first time you call the init\r\n   * method will be how the application always acts. Once this is set\r\n   * programmatically in the init method it can only be changed manually by the\r\n   * user in Settings>Notifications>App Name. This is normal iOS behaviour.\r\n   */\r\n  sound?: boolean | string;\r\n\r\n  /**\r\n   * If true the badge will be cleared on app startup.\r\n   */\r\n  clearBadge?: boolean | string;\r\n\r\n  /**\r\n   * If the array contains one or more strings each string will be used to\r\n   * subscribe to a GcmPubSub topic.\r\n   * **Note**: only usable in conjunction with `senderID`.\r\n   */\r\n  topics?: string[];\r\n\r\n  /**\r\n   * The data required in order to enable Action Buttons for iOS.\r\n   * Action Buttons on iOS - https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/PAYLOAD.md#action-buttons-1\r\n   */\r\n  categories?: CategoryArray;\r\n}\r\n\r\nexport interface CategoryArray {\r\n  [name: string]: CategoryAction;\r\n}\r\n\r\nexport interface CategoryAction {\r\n  yes?: CategoryActionData;\r\n  no?: CategoryActionData;\r\n  maybe?: CategoryActionData;\r\n}\r\n\r\nexport interface CategoryActionData {\r\n  callback: string;\r\n  title: string;\r\n  foreground: boolean;\r\n  destructive: boolean;\r\n}\r\n\r\nexport interface AndroidPushOptions {\r\n  /**\r\n   * The name of a drawable resource to use as the small-icon. The name should\r\n   * not include the extension.\r\n   */\r\n  icon?: string;\r\n\r\n  /**\r\n   * Sets the background color of the small icon on Android 5.0 and greater.\r\n   * [Supported Formats](http://developer.android.com/intl/ru/reference/android/graphics/Color.html#parseColor(java.lang.String))\r\n   */\r\n  iconColor?: string;\r\n\r\n  /**\r\n   * If true it plays the sound specified in the push data or the default system\r\n   * sound.\r\n   */\r\n  sound?: boolean | string;\r\n\r\n  /**\r\n   * If true the device vibrates on receipt of notification.\r\n   */\r\n  vibrate?: boolean | string;\r\n\r\n  /**\r\n   * If true the icon badge will be cleared on init and before push messages are processed.\r\n   */\r\n  clearBadge?: boolean | string;\r\n\r\n  /**\r\n   * If true the app clears all pending notifications when it is closed.\r\n   */\r\n  clearNotifications?: boolean | string;\r\n\r\n  /**\r\n   * If true will always show a notification, even when the app is on the\r\n   * foreground.\r\n   */\r\n  forceShow?: boolean | string;\r\n\r\n  /**\r\n   * If the array contains one or more strings each string will be used to\r\n   * subscribe to a GcmPubSub topic.\r\n   */\r\n  topics?: string[];\r\n\r\n  /**\r\n   * The key to search for text of notification.\r\n   */\r\n  messageKey?: string;\r\n\r\n  /**\r\n   * The key to search for title of notification.\r\n   */\r\n  titleKey?: string;\r\n}\r\n\r\nexport interface BrowserPushOptions {\r\n  /**\r\n   * Optional. Your GCM API key if you are using VAPID keys.\r\n   */\r\n  applicationServerKey?: string;\r\n\r\n  /**\r\n   * URL for the push server you want to use.\r\n   * Default: http://push.api.phonegap.com/v1/push\tOptional.\r\n   */\r\n  pushServiceURL?: string;\r\n\r\n}\r\n\r\nexport interface PushOptions {\r\n  ios?: IOSPushOptions;\r\n  android?: AndroidPushOptions;\r\n  windows?: any;\r\n  browser?: BrowserPushOptions;\r\n}\r\n\r\nexport type PushEvent = 'registration' | 'error' | 'notification';\r\n\r\n/**\r\n * @name Push\r\n * @description\r\n * Register and receive push notifications.\r\n *\r\n * Requires Cordova plugin: `phonegap-plugin-push`. For more info, please see the [Push plugin docs](https://github.com/phonegap/phonegap-plugin-push).\r\n *\r\n * For TypeScript users, see the [Push plugin docs about using TypeScript for custom notifications](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/TYPESCRIPT.md).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Push, PushObject, PushOptions } from '@ionic-native/push';\r\n *\r\n * constructor(private push: Push) { }\r\n *\r\n * ...\r\n *\r\n *\r\n * // to check if we have permission\r\n * this.push.hasPermission()\r\n *   .then((res: any) => {\r\n *\r\n *     if (res.isEnabled) {\r\n *       console.log('We have permission to send push notifications');\r\n *     } else {\r\n *       console.log('We do not have permission to send push notifications');\r\n *     }\r\n *\r\n *   });\r\n *\r\n * // to initialize push notifications\r\n *\r\n * const options: PushOptions = {\r\n *    android: {},\r\n *    ios: {\r\n *        alert: 'true',\r\n *        badge: true,\r\n *        sound: 'false'\r\n *    },\r\n *    windows: {},\r\n *    browser: {\r\n *        pushServiceURL: 'http://push.api.phonegap.com/v1/push'\r\n *    }\r\n * };\r\n *\r\n * const pushObject: PushObject = this.push.init(options);\r\n *\r\n * pushObject.on('notification').subscribe((notification: any) => console.log('Received a notification', notification));\r\n *\r\n * pushObject.on('registration').subscribe((registration: any) => console.log('Device registered', registration));\r\n *\r\n * pushObject.on('error').subscribe(error => console.error('Error with Push plugin', error));\r\n *\r\n *\r\n * ```\r\n *\r\n * @interfaces\r\n * RegistrationEventResponse\r\n * NotificationEventResponse\r\n * NotificationEventAdditionalData\r\n * IOSPushOptions\r\n * AndroidPushOptions\r\n * BrowserPushOptions\r\n * PushOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'Push',\r\n  plugin: 'phonegap-plugin-push',\r\n  pluginRef: 'PushNotification',\r\n  repo: 'https://github.com/phonegap/phonegap-plugin-push',\r\n  install: 'ionic cordova plugin add phonegap-plugin-push',\r\n  platforms: ['Android', 'Browser', 'iOS', 'Windows']\r\n})\r\n\r\nexport class Push extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Init push notifications\r\n   * @param options {PushOptions}\r\n   * @return {PushObject}\r\n   */\r\n  init(options: PushOptions): PushObject {\r\n    return new PushObject(options);\r\n  }\r\n\r\n  /**\r\n   * Check whether the push notification permission has been granted.\r\n   * @return {Promise<{isEnabled: boolean}>} Returns a Promise that resolves with an object with one property: isEnabled, a boolean that indicates if permission has been granted.\r\n   */\r\n  @Cordova()\r\n  hasPermission(): Promise<{ isEnabled: boolean }> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'Push',\r\n  plugin: 'phonegap-plugin-push',\r\n  pluginRef: 'PushNotification'\r\n})\r\nexport class PushObject {\r\n\r\n  private _objectInstance: any;\r\n\r\n  constructor(options: PushOptions) {\r\n    if (checkAvailability('PushNotification', 'init', 'PushNotification') === true) {\r\n      this._objectInstance = window.PushNotification.init(options);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds an event listener\r\n   * @param event {string}\r\n   * @return {Observable<EventResponse>}\r\n   */\r\n  @CordovaInstance({\r\n    observable: true,\r\n    clearFunction: 'off',\r\n    clearWithArgs: true\r\n  })\r\n  on(event: PushEvent): Observable<EventResponse> { return; }\r\n\r\n  /**\r\n   * The unregister method is used when the application no longer wants to receive push notifications.\r\n   * Beware that this cleans up all event handlers previously registered,\r\n   * so you will need to re-register them if you want them to function again without an application reload.\r\n   */\r\n  @CordovaInstance()\r\n  unregister(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Set the badge count visible when the app is not running\r\n   *\r\n   * The count is an integer indicating what number should show up in the badge.\r\n   * Passing 0 will clear the badge.\r\n   * Each notification event contains a data.count value which can be used to set the badge to correct number.\r\n   * @param count\r\n   */\r\n  @CordovaInstance({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  setApplicationIconBadgeNumber(count?: number): Promise<any> { return; };\r\n  /**\r\n   * Get the current badge count visible when the app is not running\r\n   * successHandler gets called with an integer which is the current badge count\r\n   */\r\n  @CordovaInstance()\r\n  getApplicationIconBadgeNumber(): Promise<number> { return; }\r\n\r\n  /**\r\n   * iOS only\r\n   * Tells the OS that you are done processing a background push notification.\r\n   * successHandler gets called when background push processing is successfully completed.\r\n   */\r\n  @CordovaInstance()\r\n  finish(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Tells the OS to clear all notifications from the Notification Center\r\n   */\r\n  @CordovaInstance()\r\n  clearAllNotifications(): Promise<any> { return; }\r\n\r\n  /**\r\n   * The subscribe method is used when the application wants to subscribe a new topic to receive push notifications.\r\n   * @param topic {string} Topic to subscribe to.\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  subscribe(topic: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * The unsubscribe method is used when the application no longer wants to receive push notifications from a specific topic but continue to receive other push messages.\r\n   * @param topic {string} Topic to unsubscribe from.\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  unsubscribe(topic: string): Promise<any> { return; }\r\n\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}